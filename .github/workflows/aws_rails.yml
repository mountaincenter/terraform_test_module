on:
  push:
    branches:
      - main
      - develop

name: Deploy to Amazon ECS

env:
  OIDC_ARN: ${{ secrets.AWS_OIDC_ARN }}
  db_host: ${{ secrets.AWS_DB_HOST }}
  db_name: "sample_app_production"
  db_password: ${{ secrets.AWS_DB_PASSWORD }}
  db_username: "root"
  rails_master_key: ${{ secrets.RAILS_MASTER_KEY }}
  ECR_REPOSITORY: "test-app"
  CONTINER_NAME: "app"
  SERVICE: "sample-service"
  CLUSTER: "test-cluster"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: modify task-definition json file
      working-directory: ./backend
      run: |
        sed -i 's/${db_host}/${{ env.db_host }}/g' ecs/task-definition.json
        sed -i 's/${db_name}/${{ env.db_name }}/g' ecs/task-definition.json
        sed -i 's/${db_password}/${{ env.db_password }}/g' ecs/task-definition.json
        sed -i 's/${db_username}/${{ env.db_username }}/g' ecs/task-definition.json
        sed -i 's/${rails_master_key}/${{ env.rails_master_key }}/g' ecs/task-definition.json

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Assume Role
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.OIDC_ARN }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ./backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        mkdir vendor/javascript app/javascript app/assets/{images,stylesheets}
        docker build -f ecs/Dockerfile . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: backend/ecs/task-definition.json
        container-name: ${{ env.CONTINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.SERVICE }}
        cluster: ${{ env.CLUSTER }}